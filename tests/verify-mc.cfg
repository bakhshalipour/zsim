// This is for testing/validating the modifications I've applied in the memory
// controller. I'm going to build a memory controller module (that didn't exist
// in the original ZSim), and then build the memory modules (e.g., DDR,
// DRAMSim, etc.) inside the memory controller. As long as I'm no doing
// anything extra in the memory controller, the results of the simulations w/
// and w/o the memory controller should match. 

// This system is similar to a 6-core, 2.4GHz Westmere with 10 Niagara-like cores attached to the L3
sys = {
    lineSize = 64;
    frequency = 2800;

    cores = {
        beefy = {
            type = "OOO";
            cores = 6;
            icache = "l1i_beefy";
            dcache = "l1d_beefy";
        };

        wimpy = {
            type = "Simple";
            cores = 10;
            icache = "l1i_wimpy";
            dcache = "l1d_wimpy";
        };
    };

    caches = {
        l1d_beefy = {
            caches = 6;
            size = 32768;
            array = {
                type = "SetAssoc";
                ways = 8;
            };
            latency = 4;
        };

        l1i_beefy = {
            caches = 6;
            size = 32768;
            array = {
                type = "SetAssoc";
                ways = 4;
            };
            latency = 3;
        };

        l2_beefy = {
            caches = 6;
            size = 262144;
            latency = 7;
            array = {
                type = "SetAssoc";
                ways = 8;
            };
            children = "l1i_beefy|l1d_beefy";
        };


        l1d_wimpy = {
            caches = 10;
            size = 8192;
            latency = 2;
            array = {
                type = "SetAssoc";
                ways = 4;
            };
        };

        l1i_wimpy = {
            caches = 10;
            size = 16384;
            latency = 3;
            array = {
                type = "SetAssoc";
                ways = 8;
            };
        };


        l3 = {
            caches = 1;
            banks = 6;
            size = 12582912;
            latency = 27;

            array = {
                type = "SetAssoc";
                hash = "H3";
                ways = 16;
            };
            children = "l2_beefy l1i_wimpy|l1d_wimpy";
        };
    };

    // [Kasraa] If the 'type' is 'MemoryController', it means that we have a
    // module that would receive memory requests (LLC misses) before sending
    // them to DDR modules. The 'MemoryController' module, obviously, can
    // manipulate requests before forwarding them to DRAM module(s). It would
    // have usage in implementing architectural techniques like near-memory
    // processing, DRAM caching, etc.
    mem = {
        type = "MemoryController";

        // [Kasraa] The number of memory controllers. Typically 1. Noteworthy,
        // one memory controller can "control" one or many DRAM modules. The
        // value is typically chosen to be 1 in order to have a "central
        // serialization" point (i.e., all LLC misses are observed by one
        // memory controller in their order of appearance).
        controllers = 1;

        ext_dram = {
            type = "DDR";
        };

        mc_dram = {
            type = "DDR";
            mc_drams_per_ctrl = 4;
        };
    };

};

sim = {
    maxTotalInstrs = 5000000000L;

    gmMBytes = 65536;
    phaseLength = 10000;
    statsPhaseInterval = 1000;

    printHierarchy = true;
    enableTLB = false;
    deadlockDetection = false;
};

process0 = {
    command = "stress -c 1";
};

process1 = {
    command = "/users/mbakhsha/repos/zsim/zsim-bare/tests/test-programs/summation.o";
};


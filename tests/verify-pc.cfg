// [Kasraa] This is for testing/validating the modifications I made for adding
// the program counter (PC) to memory hierarchy.

sys = {
    lineSize = 64;
    frequency = 2800;

    cores = {
        beefy = {
            type = "OOO";
            cores = 1;
            icache = "l1i_beefy";
            dcache = "l1d_beefy";
        };
    };

    caches = {
        l1d_beefy = {
            caches = 1;
            size = 32768;
            array = {
                type = "SetAssoc";
                ways = 8;
            };
            latency = 4;
        };

        l1i_beefy = {
            caches = 1;
            size = 32768;
            array = {
                type = "SetAssoc";
                ways = 4;
            };
            latency = 3;
        };

        l2_beefy = {
            caches = 1;
            size = 262144;
            latency = 7;
            array = {
                type = "SetAssoc";
                ways = 8;
            };
            children = "l1i_beefy|l1d_beefy";
        };

        l3 = {
            caches = 1;
            size = 1048576;
            latency = 27;

            array = {
                type = "SetAssoc";
                hash = "H3";
                ways = 16;
            };
            children = "l2_beefy";
        };
    };

    mem = {
        // [Kasraa] If the 'type' is 'MemoryController', it means that we have a
        // module that would receive memory requests (LLC misses) before sending
        // them to DDR modules. The 'MemoryController' module, obviously, can
        // manipulate requests before forwarding them to DRAM module(s). It would
        // have usage in implementing architectural techniques like near-memory
        // processing, DRAM caching, etc.
        type = "MemoryController";

        // [Kasraa] The number of memory controllers. Typically 1. Noteworthy,
        // one memory controller can "control" one or many DRAM modules. The
        // value is typically chosen to be 1 in order to have a "central
        // serialization" point (i.e., all LLC misses are observed by one
        // memory controller in their order of appearance).
        controllers = 1;

        ext_dram = {
            type = "DDR";
        };

        mc_dram = {
            type = "DDR";
            mc_drams_per_ctrl = 1;
        };
    };

};

sim = {
    maxTotalInstrs = 5000000000L;

    gmMBytes = 65536;
    phaseLength = 10000;
    statsPhaseInterval = 1000;

    printHierarchy = true;
    enableTLB = false;
    deadlockDetection = false;
};

process0 = {
    command = "$ZSIMPATH/zsim-bare/tests/test-programs/load_mem.o";
};


// [Kasraa] This is a config I'm going to use as my startup config. Names of
// the components are important (e.g., cores are named 'c'), because I'm going
// to write the 'result parse' script (loosely) coupled with these names.

sys = {
    lineSize = 64;
    frequency = 2800;

    cores = {
        c = {
            type = "OOO";
            cores = 1;
            icache = "l1i";
            dcache = "l1d";
        };
    };

    caches = {
        l1d = {
            caches = 1;
            size = 65536;   // 32768, 65536
            array = {
                type = "SetAssoc";
                ways = 8;
            };
            latency = 4;
        };

        l1i = {
            caches = 1;
            size = 65536;   // 32768, 65536
            array = {
                type = "SetAssoc";
                ways = 8;
            };
        };

        l2 = {
            caches = 1;
            size = 262144;  // 131072, 262144, 524288
            latency = 7;
            array = {
                type = "SetAssoc";
                ways = 8;
            };
            children = "l1i|l1d";
        };

        llc = {
            caches = 1;
            size = 16777216;    // 1048576, 2097152, 4194304, 8388608, 16777216, 33554432
            latency = 27;

            array = {
                type = "SetAssoc";
                hash = "H3";
                ways = 16;
            };
            children = "l2";
        };
    };

    mem = {
        // [Kasraa] If the 'type' is 'MemoryController', it means that we have a
        // module that would receive memory requests (LLC misses) before sending
        // them to DDR modules. The 'MemoryController' module, obviously, can
        // manipulate requests before forwarding them to DRAM module(s). It would
        // have usage in implementing architectural techniques like near-memory
        // processing, DRAM caching, etc.
        type = "MemoryController";

        // [Kasraa] The number of memory controllers. If the type is
        // 'MemoryController', it should be 1. Noteworthy, one memory
        // controller can "control" one or many DRAM modules. The value is
        // chosen to be 1 in order to have a "central serialization" point
        // (i.e., all LLC misses are observed by one memory controller in their
        // order of appearance).
        controllers = 1;

        mc_dram = {
            type = "DDR";
            mc_drams_per_ctrl = 4;
        };

        //ext_dram = {
        //   type = "DDR";
        //};

    };

};

sim = {
    maxTotalInstrs = 5000000000L;

    gmMBytes = 32768;   // 16384, 32768, 65536
    phaseLength = 10000;
    statsPhaseInterval = 1000;

    printHierarchy = true;
    enableTLB = false;
    deadlockDetection = false;
};

process0 = {
    command = "$ZSIMPATH/zsim-bare/tests/test-programs/summation.o";
};

# process1 = { command = "stress -c 8"; };
